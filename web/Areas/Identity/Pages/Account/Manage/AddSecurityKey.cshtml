@page
@model web.Areas.Identity.Pages.Account.Manage.AddSecurityKeyModel
@{
    ViewData["Title"] = "Add Security Key";
    ViewData["ActivePage"] = ManageNavPages.TwoFactorAuthentication;
}

<h4>@ViewData["Title"]</h4>


<p>Add a descriptive name for your key:</p>


<div class="form-group">
    <label for="keyname">Description:</label>
    <input type="text" class="form-control" name="keyname" />
</div>
<button class="btn btn-primary" onclick="addKey()">Add</button>
<a asp-page="TwoFactorAuthentication" class="btn btn-secondary">Cancel</a>

@section Scripts
{
    <script>

        function addKey() {

            // Update challenge string to expected Uint8Array
            var byteCharacters = atob("@Html.Raw(Model.Challenge)");
            var byteNumbers = new Array(byteCharacters.length);
            for (var i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            var challenge = new Uint8Array(byteNumbers);

            // Request ES256 algorithm
            var pubKeyCredParams = [
                {
                    type: "public-key",
                    alg: -7
                }
            ];

            // Relying party details
            var rp = {
                name: "Test Site",
                id: "@Model.RelyingPartyId"
            };

            // User handle
            var user = {
                name: "@Model.Username",
                displayName: "@Model.Username",
                id: new TextEncoder("utf-8").encode("@Model.Username")
            };

            var publicKey = { challenge, pubKeyCredParams, rp, user };

            navigator.credentials.create({ publicKey }).then((credentials) => {
                console.log(credentials);

                var publicKeyCredentialToJSON = (pubKeyCred) => {
                    if (pubKeyCred instanceof Array) {
                        let arr = [];
                        for (let i of pubKeyCred)
                            arr.push(publicKeyCredentialToJSON(i));

                        return arr;
                    }

                    if (pubKeyCred instanceof ArrayBuffer) {
                        return btoa(String.fromCharCode.apply(null, new Uint8Array(pubKeyCred)));
                    }

                    if (pubKeyCred instanceof Object) {
                        let obj = {};

                        for (let key in pubKeyCred) {
                            obj[key] = publicKeyCredentialToJSON(pubKeyCred[key]);
                        }

                        return obj;
                    }

                    return pubKeyCred;
                }

                var credentialsAsJson = publicKeyCredentialToJSON(credentials);

                $.ajax({
                    url: '/api/SecurityKey/RegisterCallback',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(credentialsAsJson),
                    success:function() {
                        window.location.href = "/Identity/Account/Manage/ManageSecurityKeys";
                    }
                });
            });




        }






    </script>
}